{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar SMTPConnection = require('../smtp-connection');\nvar assign = require('../shared').assign;\nvar XOAuth2 = require('../xoauth2');\nvar EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nvar PoolResource = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PoolResource, _EventEmitter);\n  var _super = _createSuper(PoolResource);\n  function PoolResource(pool) {\n    var _this;\n    _classCallCheck(this, PoolResource);\n    _this = _super.call(this);\n    _this.pool = pool;\n    _this.options = pool.options;\n    _this.logger = _this.pool.logger;\n    if (_this.options.auth) {\n      switch ((_this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            var oauth2 = new XOAuth2(_this.options.auth, _this.logger);\n            oauth2.provisionCallback = _this.pool.mailer && _this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            _this.auth = {\n              type: 'OAUTH2',\n              user: _this.options.auth.user,\n              oauth2: oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', function (token) {\n              return _this.pool.mailer.emit('token', token);\n            });\n            oauth2.on('error', function (err) {\n              return _this.emit('error', err);\n            });\n            break;\n          }\n        default:\n          if (!_this.options.auth.user && !_this.options.auth.pass) {\n            break;\n          }\n          _this.auth = {\n            type: (_this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: _this.options.auth.user,\n            credentials: {\n              user: _this.options.auth.user || '',\n              pass: _this.options.auth.pass,\n              options: _this.options.auth.options\n            },\n            method: (_this.options.auth.method || '').trim().toUpperCase() || _this.options.authMethod || false\n          };\n      }\n    }\n    _this._connection = false;\n    _this._connected = false;\n    _this.messages = 0;\n    _this.available = true;\n    return _this;\n  }\n\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n  _createClass(PoolResource, [{\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this2 = this;\n      this.pool.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n        var returned = false;\n        var options = _this2.options;\n        if (socketOptions && socketOptions.connection) {\n          _this2.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n          options = assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n        _this2.connection = new SMTPConnection(options);\n        _this2.connection.once('error', function (err) {\n          _this2.emit('error', err);\n          if (returned) {\n            return;\n          }\n          returned = true;\n          return callback(err);\n        });\n        _this2.connection.once('end', function () {\n          _this2.close();\n          if (returned) {\n            return;\n          }\n          returned = true;\n          var timer = setTimeout(function () {\n            if (returned) {\n              return;\n            }\n            // still have not returned, this means we have an unexpected connection close\n            var err = new Error('Unexpected socket close');\n            if (_this2.connection && _this2.connection._socket && _this2.connection._socket.upgrading) {\n              // starttls connection errors\n              err.code = 'ETLS';\n            }\n            callback(err);\n          }, 1000);\n          try {\n            timer.unref();\n          } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n          }\n        });\n        _this2.connection.connect(function () {\n          if (returned) {\n            return;\n          }\n          if (_this2.auth && (_this2.connection.allowsAuth || options.forceAuth)) {\n            _this2.connection.login(_this2.auth, function (err) {\n              if (returned) {\n                return;\n              }\n              returned = true;\n              if (err) {\n                _this2.connection.close();\n                _this2.emit('error', err);\n                return callback(err);\n              }\n              _this2._connected = true;\n              callback(null, true);\n            });\n          } else {\n            returned = true;\n            _this2._connected = true;\n            return callback(null, true);\n          }\n        });\n      });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this3 = this;\n      if (!this._connected) {\n        return this.connect(function (err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this3.send(mail, callback);\n        });\n      }\n      var envelope = mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId,\n        cid: this.id\n      }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n      if (mail.data.dsn) {\n        envelope.dsn = mail.data.dsn;\n      }\n      this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n        _this3.messages++;\n        if (err) {\n          _this3.connection.close();\n          _this3.emit('error', err);\n          return callback(err);\n        }\n        info.envelope = {\n          from: envelope.from,\n          to: envelope.to\n        };\n        info.messageId = messageId;\n        setImmediate(function () {\n          var err;\n          if (_this3.messages >= _this3.options.maxMessages) {\n            err = new Error('Resource exhausted');\n            err.code = 'EMAXLIMIT';\n            _this3.connection.close();\n            _this3.emit('error', err);\n          } else {\n            _this3.pool._checkRateLimit(function () {\n              _this3.available = true;\n              _this3.emit('available');\n            });\n          }\n        });\n        callback(null, info);\n      });\n    }\n\n    /**\n     * Closes the connection\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._connected = false;\n      if (this.auth && this.auth.oauth2) {\n        this.auth.oauth2.removeAllListeners();\n      }\n      if (this.connection) {\n        this.connection.close();\n      }\n      this.emit('close');\n    }\n  }]);\n  return PoolResource;\n}(EventEmitter);\nmodule.exports = PoolResource;","map":{"version":3,"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","connect","allowsAuth","forceAuth","login","mail","send","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"sources":["D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}