{"ast":null,"code":"'use strict';\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nvar _classCallCheck = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nfunction _handleAddress(tokens) {\n  var token;\n  var isGroup = false;\n  var state = 'text';\n  var address;\n  var addresses = [];\n  var data = {\n    address: [],\n    comment: [],\n    group: [],\n    text: []\n  };\n  var i;\n  var len;\n\n  // Filter out <addresses>, (comments) and regular text\n  for (i = 0, len = tokens.length; i < len; i++) {\n    token = tokens[i];\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n        case '(':\n          state = 'comment';\n          break;\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n        default:\n          state = 'text';\n      }\n    } else if (token.value) {\n      if (state === 'address') {\n        // handle use case where unquoted name includes a \"<\"\n        // Apple Mail truncates everything between an unexpected < and an address\n        // and so will we\n        token.value = token.value.replace(/^[^<]*<\\s*/, '');\n      }\n      data[state].push(token.value);\n    }\n  }\n\n  // If there is no text but a comment, replace the two\n  if (!data.text.length && data.comment.length) {\n    data.text = data.comment;\n    data.comment = [];\n  }\n  if (isGroup) {\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    data.text = data.text.join(' ');\n    addresses.push({\n      name: data.text || address && address.name,\n      group: data.group.length ? addressparser(data.group.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (!data.address.length && data.text.length) {\n      for (i = data.text.length - 1; i >= 0; i--) {\n        if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          data.address = data.text.splice(i, 1);\n          break;\n        }\n      }\n      var _regexHandler = function _regexHandler(address) {\n        if (!data.address.length) {\n          data.address = [address.trim()];\n          return ' ';\n        } else {\n          return address;\n        }\n      };\n\n      // still no address\n      if (!data.address.length) {\n        for (i = data.text.length - 1; i >= 0; i--) {\n          // fixed the regex to parse email address correctly when email address has more than one @\n          data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n          if (data.address.length) {\n            break;\n          }\n        }\n      }\n    }\n\n    // If there's still is no text but a comment exixts, replace the two\n    if (!data.text.length && data.comment.length) {\n      data.text = data.comment;\n      data.comment = [];\n    }\n\n    // Keep only the first address occurence, push others to regular text\n    if (data.address.length > 1) {\n      data.text = data.text.concat(data.address.splice(1));\n    }\n\n    // Join values with spaces\n    data.text = data.text.join(' ');\n    data.address = data.address.join(' ');\n    if (!data.address && isGroup) {\n      return [];\n    } else {\n      address = {\n        address: data.address || data.text || '',\n        name: data.text || data.address || ''\n      };\n      if (address.address === address.name) {\n        if ((address.address || '').match(/@/)) {\n          address.name = '';\n        } else {\n          address.address = '';\n        }\n      }\n      addresses.push(address);\n    }\n  }\n  return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(str) {\n    _classCallCheck(this, Tokenizer);\n    this.str = (str || '').toString();\n    this.operatorCurrent = '';\n    this.operatorExpecting = '';\n    this.node = null;\n    this.escaped = false;\n    this.list = [];\n    /**\n     * Operator tokens and which tokens are expected to end the sequence\n     */\n    this.operators = {\n      '\"': '\"',\n      '(': ')',\n      '<': '>',\n      ',': '',\n      ':': ';',\n      // Semicolons are not a legal delimiter per the RFC2822 grammar other\n      // than for terminating a group, but they are also not valid for any\n      // other use in this context.  Given that some mail clients have\n      // historically allowed the semicolon as a delimiter equivalent to the\n      // comma in their UI, it makes sense to treat them the same as a comma\n      // when used outside of a group.\n      ';': ''\n    };\n  }\n\n  /**\n   * Tokenizes the original input string\n   *\n   * @return {Array} An array of operator|text tokens\n   */\n  _createClass(Tokenizer, [{\n    key: \"tokenize\",\n    value: function tokenize() {\n      var chr,\n        list = [];\n      for (var i = 0, len = this.str.length; i < len; i++) {\n        chr = this.str.charAt(i);\n        this.checkChar(chr);\n      }\n      this.list.forEach(function (node) {\n        node.value = (node.value || '').toString().trim();\n        if (node.value) {\n          list.push(node);\n        }\n      });\n      return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n  }, {\n    key: \"checkChar\",\n    value: function checkChar(chr) {\n      if (this.escaped) {\n        // ignore next condition blocks\n      } else if (chr === this.operatorExpecting) {\n        this.node = {\n          type: 'operator',\n          value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = '';\n        this.escaped = false;\n        return;\n      } else if (!this.operatorExpecting && chr in this.operators) {\n        this.node = {\n          type: 'operator',\n          value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = this.operators[chr];\n        this.escaped = false;\n        return;\n      } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n        this.escaped = true;\n        return;\n      }\n      if (!this.node) {\n        this.node = {\n          type: 'text',\n          value: ''\n        };\n        this.list.push(this.node);\n      }\n      if (chr === '\\n') {\n        // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n        // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n        chr = ' ';\n      }\n      if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n        // skip command bytes\n        this.node.value += chr;\n      }\n      this.escaped = false;\n    }\n  }]);\n  return Tokenizer;\n}();\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str, options) {\n  options = options || {};\n  var tokenizer = new Tokenizer(str);\n  var tokens = tokenizer.tokenize();\n  var addresses = [];\n  var address = [];\n  var parsedAddresses = [];\n  tokens.forEach(function (token) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (address.length) {\n        addresses.push(address);\n      }\n      address = [];\n    } else {\n      address.push(token);\n    }\n  });\n  if (address.length) {\n    addresses.push(address);\n  }\n  addresses.forEach(function (address) {\n    address = _handleAddress(address);\n    if (address.length) {\n      parsedAddresses = parsedAddresses.concat(address);\n    }\n  });\n  if (options.flatten) {\n    var _addresses = [];\n    var walkAddressList = function walkAddressList(list) {\n      list.forEach(function (address) {\n        if (address.group) {\n          return walkAddressList(address.group);\n        } else {\n          _addresses.push(address);\n        }\n      });\n    };\n    walkAddressList(parsedAddresses);\n    return _addresses;\n  }\n  return parsedAddresses;\n}\n\n// expose to the world\nmodule.exports = addressparser;","map":{"version":3,"names":["_handleAddress","tokens","token","isGroup","state","address","addresses","data","comment","group","text","i","len","length","type","value","replace","push","join","name","addressparser","match","splice","_regexHandler","trim","concat","Tokenizer","str","toString","operatorCurrent","operatorExpecting","node","escaped","list","operators","chr","charAt","checkChar","forEach","includes","charCodeAt","options","tokenizer","tokenize","parsedAddresses","flatten","walkAddressList","module","exports"],"sources":["D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/nodemailer/lib/addressparser/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = 'text';\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n\n    // Filter out <addresses>, (comments) and regular text\n    for (i = 0, len = tokens.length; i < len; i++) {\n        token = tokens[i];\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n            }\n        } else if (token.value) {\n            if (state === 'address') {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\n            }\n            data[state].push(token.value);\n        }\n    }\n\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(' ');\n        addresses.push({\n            name: data.text || (address && address.name),\n            group: data.group.length ? addressparser(data.group.join(',')) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for (i = data.text.length - 1; i >= 0; i--) {\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n\n            let _regexHandler = function (address) {\n                if (!data.address.length) {\n                    data.address = [address.trim()];\n                    return ' ';\n                } else {\n                    return address;\n                }\n            };\n\n            // still no address\n            if (!data.address.length) {\n                for (i = data.text.length - 1; i >= 0; i--) {\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n\n        // Join values with spaces\n        data.text = data.text.join(' ');\n        data.address = data.address.join(' ');\n\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || '',\n                name: data.text || data.address || ''\n            };\n\n            if (address.address === address.name) {\n                if ((address.address || '').match(/@/)) {\n                    address.name = '';\n                } else {\n                    address.address = '';\n                }\n            }\n\n            addresses.push(address);\n        }\n    }\n\n    return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nclass Tokenizer {\n    constructor(str) {\n        this.str = (str || '').toString();\n        this.operatorCurrent = '';\n        this.operatorExpecting = '';\n        this.node = null;\n        this.escaped = false;\n\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */\n        this.operators = {\n            '\"': '\"',\n            '(': ')',\n            '<': '>',\n            ',': '',\n            ':': ';',\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            ';': ''\n        };\n    }\n\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */\n    tokenize() {\n        let chr,\n            list = [];\n        for (let i = 0, len = this.str.length; i < len; i++) {\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n\n        this.list.forEach(node => {\n            node.value = (node.value || '').toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n\n        return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n    checkChar(chr) {\n        if (this.escaped) {\n            // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = '';\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n            this.escaped = true;\n            return;\n        }\n\n        if (!this.node) {\n            this.node = {\n                type: 'text',\n                value: ''\n            };\n            this.list.push(this.node);\n        }\n\n        if (chr === '\\n') {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = ' ';\n        }\n\n        if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n\n        this.escaped = false;\n    }\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str, options) {\n    options = options || {};\n\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n\n    tokens.forEach(token => {\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n\n    if (address.length) {\n        addresses.push(address);\n    }\n\n    addresses.forEach(address => {\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = list => {\n            list.forEach(address => {\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n\n    return parsedAddresses;\n}\n\n// expose to the world\nmodule.exports = addressparser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}