{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\n// import { Link } from 'react-router-dom'\n// import { useDispatch, useSelector } from 'react-redux'\n\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// import { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\n// import { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\n// function OrderScreen({ match, history }) {\n//     const orderId = match.params.id\n//     const dispatch = useDispatch()\n\n//     const [sdkReady, setSdkReady] = useState(false)\n\n//     const orderDetails = useSelector(state => state.orderDetails)\n//     const { order, error, loading } = orderDetails\n\n//     const orderPay = useSelector(state => state.orderPay)\n//     const { loading: loadingPay, success: successPay } = orderPay\n\n//     const orderDeliver = useSelector(state => state.orderDeliver)\n//     const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n//     const userLogin = useSelector(state => state.userLogin)\n//     const { userInfo } = userLogin\n\n//     if (!loading && !error) {\n//         order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n//     }\n\n//     const addPayPalScript = () => {\n//         const script = document.createElement('script')\n//         script.type = 'text/javascript'\n//         script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\n//         script.async = true\n//         script.onload = () => {\n//             setSdkReady(true)\n//         }\n//         document.body.appendChild(script)\n//     }\n\n//     useEffect(() => {\n\n//         if (!userInfo) {\n//             history.push('/login')\n//         }\n\n//         if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\n//             dispatch({ type: ORDER_PAY_RESET })\n//             dispatch({ type: ORDER_DELIVER_RESET })\n\n//             dispatch(getOrderDetails(orderId))\n//         } else if (!order.isPaid) {\n//             if (!window.paypal) {\n//                 addPayPalScript()\n//             } else {\n//                 setSdkReady(true)\n//             }\n//         }\n//     }, [dispatch, order, orderId, successPay, successDeliver])\n\n//     const successPaymentHandler = (paymentResult) => {\n//         dispatch(payOrder(orderId, paymentResult))\n//     }\n\n//     const deliverHandler = () => {\n//         dispatch(deliverOrder(order))\n//     }\n\n//     return loading ? (\n//         <Loader />\n//     ) : error ? (\n//         <Message variant='danger'>{error}</Message>\n//     ) : (\n//                 <div>\n//                     <h1>Order: {order.Id}</h1>\n//                     <Row>\n//                         <Col md={8}>\n//                             <ListGroup variant='flush'>\n//                                 <ListGroup.Item>\n//                                     <h2>Shipping</h2>\n//                                     <p><strong>Name: </strong> {order.user.name}</p>\n//                                     <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n//                                     <p>\n//                                         <strong>Shipping: </strong>\n//                                         {order.shippingAddress.address},  {order.shippingAddress.city}\n//                                         {'  '}\n//                                         {order.shippingAddress.postalCode},\n//                                 {'  '}\n//                                         {order.shippingAddress.country}\n//                                     </p>\n\n//                                     {order.isDelivered ? (\n//                                         <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n//                                     ) : (\n//                                             <Message variant='warning'>Not Delivered</Message>\n//                                         )}\n//                                 </ListGroup.Item>\n\n//                                 <ListGroup.Item>\n//                                     <h2>Payment Method</h2>\n//                                     <p>\n//                                         <strong>Method: </strong>\n//                                         {order.paymentMethod}\n//                                     </p>\n//                                     {order.isPaid ? (\n//                                         <Message variant='success'>Paid on {order.paidAt}</Message>\n//                                     ) : (\n//                                             <Message variant='warning'>Not Paid</Message>\n//                                         )}\n\n//                                 </ListGroup.Item>\n\n//                                 <ListGroup.Item>\n//                                     <h2>Order Items</h2>\n//                                     {order.orderItems.length === 0 ? <Message variant='info'>\n//                                         Order is empty\n//                             </Message> : (\n//                                             <ListGroup variant='flush'>\n//                                                 {order.orderItems.map((item, index) => (\n//                                                     <ListGroup.Item key={index}>\n//                                                         <Row>\n//                                                             <Col md={1}>\n//                                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                                             </Col>\n\n//                                                             <Col>\n//                                                                 <Link to={`/product/${item.product}`}>{item.name}</Link>\n//                                                             </Col>\n\n//                                                             <Col md={4}>\n//                                                                 {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n//                                                             </Col>\n//                                                         </Row>\n//                                                     </ListGroup.Item>\n//                                                 ))}\n//                                             </ListGroup>\n//                                         )}\n//                                 </ListGroup.Item>\n\n//                             </ListGroup>\n\n//                         </Col>\n\n//                         <Col md={4}>\n//                             <Card>\n//                                 <ListGroup variant='flush'>\n//                                     <ListGroup.Item>\n//                                         <h2>Order Summary</h2>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Items:</Col>\n//                                             <Col>${order.itemsPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Shipping:</Col>\n//                                             <Col>${order.shippingPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Tax:</Col>\n//                                             <Col>${order.taxPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Total:</Col>\n//                                             <Col>${order.totalPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     {!order.isPaid && (\n//                                         <ListGroup.Item>\n//                                             {loadingPay && <Loader />}\n\n//                                             {!sdkReady ? (\n//                                                 <Loader />\n//                                             ) : (\n//                                                     <PayPalButton\n//                                                         amount={order.totalPrice}\n//                                                         onSuccess={successPaymentHandler}\n//                                                     />\n//                                                 )}\n//                                         </ListGroup.Item>\n//                                     )}\n//                                 </ListGroup>\n//                                 {loadingDeliver && <Loader />}\n//                                 {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n//                                     <ListGroup.Item>\n//                                         <Button\n//                                             type='button'\n//                                             className='btn btn-block'\n//                                             onClick={deliverHandler}\n//                                         >\n//                                             Mark As Delivered\n//                                         </Button>\n//                                     </ListGroup.Item>\n//                                 )}\n//                             </Card>\n//                         </Col>\n//                     </Row>\n//                 </div>\n//             )\n// }\n\n// export default OrderScreen","map":{"version":3,"names":[],"sources":["D:/fyp/Ecommerce_Bikiemart/frontend/src/screens/OrderScreen.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\n// import { Link } from 'react-router-dom'\n// import { useDispatch, useSelector } from 'react-redux'\n\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// import { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\n// import { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\n// function OrderScreen({ match, history }) {\n//     const orderId = match.params.id\n//     const dispatch = useDispatch()\n\n\n//     const [sdkReady, setSdkReady] = useState(false)\n\n//     const orderDetails = useSelector(state => state.orderDetails)\n//     const { order, error, loading } = orderDetails\n\n//     const orderPay = useSelector(state => state.orderPay)\n//     const { loading: loadingPay, success: successPay } = orderPay\n\n//     const orderDeliver = useSelector(state => state.orderDeliver)\n//     const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n//     const userLogin = useSelector(state => state.userLogin)\n//     const { userInfo } = userLogin\n\n\n//     if (!loading && !error) {\n//         order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n//     }\n\n\n//     const addPayPalScript = () => {\n//         const script = document.createElement('script')\n//         script.type = 'text/javascript'\n//         script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\n//         script.async = true\n//         script.onload = () => {\n//             setSdkReady(true)\n//         }\n//         document.body.appendChild(script)\n//     }\n\n//     useEffect(() => {\n\n//         if (!userInfo) {\n//             history.push('/login')\n//         }\n\n//         if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\n//             dispatch({ type: ORDER_PAY_RESET })\n//             dispatch({ type: ORDER_DELIVER_RESET })\n\n//             dispatch(getOrderDetails(orderId))\n//         } else if (!order.isPaid) {\n//             if (!window.paypal) {\n//                 addPayPalScript()\n//             } else {\n//                 setSdkReady(true)\n//             }\n//         }\n//     }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n//     const successPaymentHandler = (paymentResult) => {\n//         dispatch(payOrder(orderId, paymentResult))\n//     }\n\n//     const deliverHandler = () => {\n//         dispatch(deliverOrder(order))\n//     }\n\n//     return loading ? (\n//         <Loader />\n//     ) : error ? (\n//         <Message variant='danger'>{error}</Message>\n//     ) : (\n//                 <div>\n//                     <h1>Order: {order.Id}</h1>\n//                     <Row>\n//                         <Col md={8}>\n//                             <ListGroup variant='flush'>\n//                                 <ListGroup.Item>\n//                                     <h2>Shipping</h2>\n//                                     <p><strong>Name: </strong> {order.user.name}</p>\n//                                     <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n//                                     <p>\n//                                         <strong>Shipping: </strong>\n//                                         {order.shippingAddress.address},  {order.shippingAddress.city}\n//                                         {'  '}\n//                                         {order.shippingAddress.postalCode},\n//                                 {'  '}\n//                                         {order.shippingAddress.country}\n//                                     </p>\n\n//                                     {order.isDelivered ? (\n//                                         <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n//                                     ) : (\n//                                             <Message variant='warning'>Not Delivered</Message>\n//                                         )}\n//                                 </ListGroup.Item>\n\n//                                 <ListGroup.Item>\n//                                     <h2>Payment Method</h2>\n//                                     <p>\n//                                         <strong>Method: </strong>\n//                                         {order.paymentMethod}\n//                                     </p>\n//                                     {order.isPaid ? (\n//                                         <Message variant='success'>Paid on {order.paidAt}</Message>\n//                                     ) : (\n//                                             <Message variant='warning'>Not Paid</Message>\n//                                         )}\n\n//                                 </ListGroup.Item>\n\n//                                 <ListGroup.Item>\n//                                     <h2>Order Items</h2>\n//                                     {order.orderItems.length === 0 ? <Message variant='info'>\n//                                         Order is empty\n//                             </Message> : (\n//                                             <ListGroup variant='flush'>\n//                                                 {order.orderItems.map((item, index) => (\n//                                                     <ListGroup.Item key={index}>\n//                                                         <Row>\n//                                                             <Col md={1}>\n//                                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                                             </Col>\n\n//                                                             <Col>\n//                                                                 <Link to={`/product/${item.product}`}>{item.name}</Link>\n//                                                             </Col>\n\n//                                                             <Col md={4}>\n//                                                                 {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n//                                                             </Col>\n//                                                         </Row>\n//                                                     </ListGroup.Item>\n//                                                 ))}\n//                                             </ListGroup>\n//                                         )}\n//                                 </ListGroup.Item>\n\n//                             </ListGroup>\n\n//                         </Col>\n\n//                         <Col md={4}>\n//                             <Card>\n//                                 <ListGroup variant='flush'>\n//                                     <ListGroup.Item>\n//                                         <h2>Order Summary</h2>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Items:</Col>\n//                                             <Col>${order.itemsPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Shipping:</Col>\n//                                             <Col>${order.shippingPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Tax:</Col>\n//                                             <Col>${order.taxPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n//                                     <ListGroup.Item>\n//                                         <Row>\n//                                             <Col>Total:</Col>\n//                                             <Col>${order.totalPrice}</Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n\n\n//                                     {!order.isPaid && (\n//                                         <ListGroup.Item>\n//                                             {loadingPay && <Loader />}\n\n//                                             {!sdkReady ? (\n//                                                 <Loader />\n//                                             ) : (\n//                                                     <PayPalButton\n//                                                         amount={order.totalPrice}\n//                                                         onSuccess={successPaymentHandler}\n//                                                     />\n//                                                 )}\n//                                         </ListGroup.Item>\n//                                     )}\n//                                 </ListGroup>\n//                                 {loadingDeliver && <Loader />}\n//                                 {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n//                                     <ListGroup.Item>\n//                                         <Button\n//                                             type='button'\n//                                             className='btn btn-block'\n//                                             onClick={deliverHandler}\n//                                         >\n//                                             Mark As Delivered\n//                                         </Button>\n//                                     </ListGroup.Item>\n//                                 )}\n//                             </Card>\n//                         </Col>\n//                     </Row>\n//                 </div>\n//             )\n// }\n\n// export default OrderScreen\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}