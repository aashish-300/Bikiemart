{"ast":null,"code":"/* eslint no-undefined: 0 */\n\n'use strict';\n\nvar _classCallCheck = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar MimeNode = require('../mime-node');\nvar mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nvar MailComposer = /*#__PURE__*/function () {\n  function MailComposer(mail) {\n    _classCallCheck(this, MailComposer);\n    this.mail = mail || {};\n    this.message = false;\n  }\n\n  /**\n   * Builds MimeNode instance\n   */\n  _createClass(MailComposer, [{\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n      this._alternatives = this.getAlternatives();\n      this._htmlNode = this._alternatives.filter(function (alternative) {\n        return /^text\\/html\\b/i.test(alternative.contentType);\n      }).pop();\n      this._attachments = this.getAttachments(!!this._htmlNode);\n      this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n      this._useAlternative = this._alternatives.length > 1;\n      this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n\n      // Compose MIME tree\n      if (this.mail.raw) {\n        this.message = new MimeNode('message/rfc822', {\n          newline: this.mail.newline\n        }).setRaw(this.mail.raw);\n      } else if (this._useMixed) {\n        this.message = this._createMixed();\n      } else if (this._useAlternative) {\n        this.message = this._createAlternative();\n      } else if (this._useRelated) {\n        this.message = this._createRelated();\n      } else {\n        this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n          contentType: 'text/plain',\n          content: ''\n        });\n      }\n\n      // Add custom headers\n      if (this.mail.headers) {\n        this.message.addHeader(this.mail.headers);\n      }\n\n      // Add headers to the root node, always overrides custom headers\n      ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(function (header) {\n        var key = header.replace(/-(\\w)/g, function (o, c) {\n          return c.toUpperCase();\n        });\n        if (_this.mail[key]) {\n          _this.message.setHeader(header, _this.mail[key]);\n        }\n      });\n\n      // Sets custom envelope\n      if (this.mail.envelope) {\n        this.message.setEnvelope(this.mail.envelope);\n      }\n\n      // ensure Message-Id value\n      this.message.messageId();\n      return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments(findRelated) {\n      var _this2 = this;\n      var icalEvent, eventObject;\n      var attachments = [].concat(this.mail.attachments || []).map(function (attachment, i) {\n        var data;\n        var isMessageNode = /^message\\//i.test(attachment.contentType);\n        if (/^data:/i.test(attachment.path || attachment.href)) {\n          attachment = _this2._processDataUrl(attachment);\n        }\n        data = {\n          contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n          contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n          contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n        };\n        if (attachment.filename) {\n          data.filename = attachment.filename;\n        } else if (!isMessageNode && attachment.filename !== false) {\n          data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n          if (data.filename.indexOf('.') < 0) {\n            data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n          }\n        }\n        if (/^https?:\\/\\//i.test(attachment.path)) {\n          attachment.href = attachment.path;\n          attachment.path = undefined;\n        }\n        if (attachment.cid) {\n          data.cid = attachment.cid;\n        }\n        if (attachment.raw) {\n          data.raw = attachment.raw;\n        } else if (attachment.path) {\n          data.content = {\n            path: attachment.path\n          };\n        } else if (attachment.href) {\n          data.content = {\n            href: attachment.href,\n            httpHeaders: attachment.httpHeaders\n          };\n        } else {\n          data.content = attachment.content || '';\n        }\n        if (attachment.encoding) {\n          data.encoding = attachment.encoding;\n        }\n        if (attachment.headers) {\n          data.headers = attachment.headers;\n        }\n        return data;\n      });\n      if (this.mail.icalEvent) {\n        if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n          icalEvent = this.mail.icalEvent;\n        } else {\n          icalEvent = {\n            content: this.mail.icalEvent\n          };\n        }\n        eventObject = {};\n        Object.keys(icalEvent).forEach(function (key) {\n          eventObject[key] = icalEvent[key];\n        });\n        eventObject.contentType = 'application/ics';\n        if (!eventObject.headers) {\n          eventObject.headers = {};\n        }\n        eventObject.filename = eventObject.filename || 'invite.ics';\n        eventObject.headers['Content-Disposition'] = 'attachment';\n        eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n      }\n      if (!findRelated) {\n        return {\n          attached: attachments.concat(eventObject || []),\n          related: []\n        };\n      } else {\n        return {\n          attached: attachments.filter(function (attachment) {\n            return !attachment.cid;\n          }).concat(eventObject || []),\n          related: attachments.filter(function (attachment) {\n            return !!attachment.cid;\n          })\n        };\n      }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n  }, {\n    key: \"getAlternatives\",\n    value: function getAlternatives() {\n      var _this3 = this;\n      var alternatives = [],\n        text,\n        html,\n        watchHtml,\n        amp,\n        icalEvent,\n        eventObject;\n      if (this.mail.text) {\n        if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n          text = this.mail.text;\n        } else {\n          text = {\n            content: this.mail.text\n          };\n        }\n        text.contentType = 'text/plain; charset=utf-8';\n      }\n      if (this.mail.watchHtml) {\n        if (typeof this.mail.watchHtml === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n          watchHtml = this.mail.watchHtml;\n        } else {\n          watchHtml = {\n            content: this.mail.watchHtml\n          };\n        }\n        watchHtml.contentType = 'text/watch-html; charset=utf-8';\n      }\n      if (this.mail.amp) {\n        if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n          amp = this.mail.amp;\n        } else {\n          amp = {\n            content: this.mail.amp\n          };\n        }\n        amp.contentType = 'text/x-amp-html; charset=utf-8';\n      }\n\n      // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n      if (this.mail.icalEvent) {\n        if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n          icalEvent = this.mail.icalEvent;\n        } else {\n          icalEvent = {\n            content: this.mail.icalEvent\n          };\n        }\n        eventObject = {};\n        Object.keys(icalEvent).forEach(function (key) {\n          eventObject[key] = icalEvent[key];\n        });\n        if (eventObject.content && typeof eventObject.content === 'object') {\n          // we are going to have the same attachment twice, so mark this to be\n          // resolved just once\n          eventObject.content._resolve = true;\n        }\n        eventObject.filename = false;\n        eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n        if (!eventObject.headers) {\n          eventObject.headers = {};\n        }\n      }\n      if (this.mail.html) {\n        if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n          html = this.mail.html;\n        } else {\n          html = {\n            content: this.mail.html\n          };\n        }\n        html.contentType = 'text/html; charset=utf-8';\n      }\n      [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(function (alternative) {\n        var data;\n        if (/^data:/i.test(alternative.path || alternative.href)) {\n          alternative = _this3._processDataUrl(alternative);\n        }\n        data = {\n          contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n          contentTransferEncoding: alternative.contentTransferEncoding\n        };\n        if (alternative.filename) {\n          data.filename = alternative.filename;\n        }\n        if (/^https?:\\/\\//i.test(alternative.path)) {\n          alternative.href = alternative.path;\n          alternative.path = undefined;\n        }\n        if (alternative.raw) {\n          data.raw = alternative.raw;\n        } else if (alternative.path) {\n          data.content = {\n            path: alternative.path\n          };\n        } else if (alternative.href) {\n          data.content = {\n            href: alternative.href\n          };\n        } else {\n          data.content = alternative.content || '';\n        }\n        if (alternative.encoding) {\n          data.encoding = alternative.encoding;\n        }\n        if (alternative.headers) {\n          data.headers = alternative.headers;\n        }\n        alternatives.push(data);\n      });\n      return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createMixed\",\n    value: function _createMixed(parentNode) {\n      var _this4 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/mixed', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/mixed', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      if (this._useAlternative) {\n        this._createAlternative(node);\n      } else if (this._useRelated) {\n        this._createRelated(node);\n      }\n      [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(function (element) {\n        // if the element is a html node from related subpart then ignore it\n        if (!_this4._useRelated || element !== _this4._htmlNode) {\n          _this4._createContentNode(node, element);\n        }\n      });\n      return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createAlternative\",\n    value: function _createAlternative(parentNode) {\n      var _this5 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/alternative', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/alternative', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      this._alternatives.forEach(function (alternative) {\n        if (_this5._useRelated && _this5._htmlNode === alternative) {\n          _this5._createRelated(node);\n        } else {\n          _this5._createContentNode(node, alternative);\n        }\n      });\n      return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createRelated\",\n    value: function _createRelated(parentNode) {\n      var _this6 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/related; type=\"text/html\"', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      this._createContentNode(node, this._htmlNode);\n      this._attachments.related.forEach(function (alternative) {\n        return _this6._createContentNode(node, alternative);\n      });\n      return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createContentNode\",\n    value: function _createContentNode(parentNode, element) {\n      element = element || {};\n      element.content = element.content || '';\n      var node;\n      var encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n      if (!parentNode) {\n        node = new MimeNode(element.contentType, {\n          filename: element.filename,\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild(element.contentType, {\n          filename: element.filename,\n          textEncoding: this.mail.textEncoding,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n\n      // add custom headers\n      if (element.headers) {\n        node.addHeader(element.headers);\n      }\n      if (element.cid) {\n        node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n      }\n      if (element.contentTransferEncoding) {\n        node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n      } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n        node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n      }\n      if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n        node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n      }\n      if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n        element.content = Buffer.from(element.content, encoding);\n      }\n\n      // prefer pregenerated raw content\n      if (element.raw) {\n        node.setRaw(element.raw);\n      } else {\n        node.setContent(element.content);\n      }\n      return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n  }, {\n    key: \"_processDataUrl\",\n    value: function _processDataUrl(element) {\n      var parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n      if (!parts) {\n        return element;\n      }\n      element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n      if ('path' in element) {\n        element.path = false;\n      }\n      if ('href' in element) {\n        element.href = false;\n      }\n      parts[1].split(';').forEach(function (item) {\n        if (/^\\w+\\/[^/]+$/i.test(item)) {\n          element.contentType = element.contentType || item.toLowerCase();\n        }\n      });\n      return element;\n    }\n  }]);\n  return MailComposer;\n}();\nmodule.exports = MailComposer;","map":{"version":3,"names":["MimeNode","require","mimeFuncs","MailComposer","mail","message","_alternatives","getAlternatives","_htmlNode","filter","alternative","test","contentType","pop","_attachments","getAttachments","_useRelated","related","length","_useAlternative","_useMixed","attached","raw","newline","setRaw","_createMixed","_createAlternative","_createRelated","_createContentNode","concat","shift","content","headers","addHeader","forEach","header","key","replace","o","c","toUpperCase","setHeader","envelope","setEnvelope","messageId","findRelated","icalEvent","eventObject","attachments","map","attachment","i","data","isMessageNode","path","href","_processDataUrl","detectMimeType","filename","contentDisposition","contentTransferEncoding","split","indexOf","detectExtension","undefined","cid","httpHeaders","encoding","Object","keys","alternatives","text","html","watchHtml","amp","_resolve","method","toString","trim","push","parentNode","node","baseBoundary","textEncoding","boundaryPrefix","disableUrlAccess","disableFileAccess","normalizeHeaderKey","createChild","element","toLowerCase","includes","Buffer","from","setContent","parts","match","decodeURIComponent","item","module","exports"],"sources":["D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/nodemailer/lib/mail-composer/index.js"],"sourcesContent":["/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n    constructor(mail) {\n        this.mail = mail || {};\n        this.message = false;\n    }\n\n    /**\n     * Builds MimeNode instance\n     */\n    compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || (this._alternatives.length && this._attachments.attached.length === 1);\n\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode('message/rfc822', { newline: this.mail.newline }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(\n                false,\n                []\n                    .concat(this._alternatives || [])\n                    .concat(this._attachments.attached || [])\n                    .shift() || {\n                    contentType: 'text/plain',\n                    content: ''\n                }\n            );\n        }\n\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n\n        // Add headers to the root node, always overrides custom headers\n        ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n            let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n\n        // ensure Message-Id value\n        this.message.messageId();\n\n        return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n    getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n\n            data = {\n                contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n                contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n                contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n            };\n\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                if (data.filename.indexOf('.') < 0) {\n                    data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || '';\n            }\n\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n\n            return data;\n        });\n\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            eventObject.contentType = 'application/ics';\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || 'invite.ics';\n            eventObject.headers['Content-Disposition'] = 'attachment';\n            eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n        }\n\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n                related: attachments.filter(attachment => !!attachment.cid)\n            };\n        }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n    getAlternatives() {\n        let alternatives = [],\n            text,\n            html,\n            watchHtml,\n            amp,\n            icalEvent,\n            eventObject;\n\n        if (this.mail.text) {\n            if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = 'text/plain; charset=utf-8';\n        }\n\n        if (this.mail.watchHtml) {\n            if (\n                typeof this.mail.watchHtml === 'object' &&\n                (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)\n            ) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = 'text/watch-html; charset=utf-8';\n        }\n\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = 'text/x-amp-html; charset=utf-8';\n        }\n\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            if (eventObject.content && typeof eventObject.content === 'object') {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n\n            eventObject.filename = false;\n            eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n\n        if (this.mail.html) {\n            if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = 'text/html; charset=utf-8';\n        }\n\n        []\n            .concat(text || [])\n            .concat(watchHtml || [])\n            .concat(amp || [])\n            .concat(html || [])\n            .concat(eventObject || [])\n            .concat(this.mail.alternatives || [])\n            .forEach(alternative => {\n                let data;\n\n                if (/^data:/i.test(alternative.path || alternative.href)) {\n                    alternative = this._processDataUrl(alternative);\n                }\n\n                data = {\n                    contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n                    contentTransferEncoding: alternative.contentTransferEncoding\n                };\n\n                if (alternative.filename) {\n                    data.filename = alternative.filename;\n                }\n\n                if (/^https?:\\/\\//i.test(alternative.path)) {\n                    alternative.href = alternative.path;\n                    alternative.path = undefined;\n                }\n\n                if (alternative.raw) {\n                    data.raw = alternative.raw;\n                } else if (alternative.path) {\n                    data.content = {\n                        path: alternative.path\n                    };\n                } else if (alternative.href) {\n                    data.content = {\n                        href: alternative.href\n                    };\n                } else {\n                    data.content = alternative.content || '';\n                }\n\n                if (alternative.encoding) {\n                    data.encoding = alternative.encoding;\n                }\n\n                if (alternative.headers) {\n                    data.headers = alternative.headers;\n                }\n\n                alternatives.push(data);\n            });\n\n        return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createMixed(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/mixed', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/mixed', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n\n        []\n            .concat((!this._useAlternative && this._alternatives) || [])\n            .concat(this._attachments.attached || [])\n            .forEach(element => {\n                // if the element is a html node from related subpart then ignore it\n                if (!this._useRelated || element !== this._htmlNode) {\n                    this._createContentNode(node, element);\n                }\n            });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createAlternative(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/alternative', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/alternative', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._alternatives.forEach(alternative => {\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createRelated(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._createContentNode(node, this._htmlNode);\n\n        this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n        return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n    _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || '';\n\n        let node;\n        let encoding = (element.encoding || 'utf8')\n            .toString()\n            .toLowerCase()\n            .replace(/[-_\\s]/g, '');\n\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n\n        if (element.cid) {\n            node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n        }\n\n        if (element.contentTransferEncoding) {\n            node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n        }\n\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n        }\n\n        if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n\n        return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n    _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n        if ('path' in element) {\n            element.path = false;\n        }\n\n        if ('href' in element) {\n            element.href = false;\n        }\n\n        parts[1].split(';').forEach(item => {\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n\n        return element;\n    }\n}\n\nmodule.exports = MailComposer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}