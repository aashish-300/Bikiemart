{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar EventEmitter = require('events');\nvar packageData = require('../../package.json');\nvar shared = require('../shared');\nvar LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nvar SESTransport = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SESTransport, _EventEmitter);\n  var _super = _createSuper(SESTransport);\n  function SESTransport(options) {\n    var _this;\n    _classCallCheck(this, SESTransport);\n    _this = _super.call(this);\n    options = options || {};\n    _this.options = options || {};\n    _this.ses = _this.options.SES;\n    _this.name = 'SESTransport';\n    _this.version = packageData.version;\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'ses-transport'\n    });\n\n    // parallel sending connections\n    _this.maxConnections = Number(_this.options.maxConnections) || Infinity;\n    _this.connections = 0;\n\n    // max messages per second\n    _this.sendingRate = Number(_this.options.sendingRate) || Infinity;\n    _this.sendingRateTTL = null;\n    _this.rateInterval = 1000; // milliseconds\n    _this.rateMessages = [];\n    _this.pending = [];\n    _this.idling = true;\n    setImmediate(function () {\n      if (_this.idling) {\n        _this.emit('idle');\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  _createClass(SESTransport, [{\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this2 = this;\n      if (this.connections >= this.maxConnections) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n      if (!this._checkSendingRate()) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n      this._send(mail, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        setImmediate(function () {\n          return callback.apply(void 0, args);\n        });\n        _this2._sent();\n      });\n    }\n  }, {\n    key: \"_checkRatedQueue\",\n    value: function _checkRatedQueue() {\n      var _this3 = this;\n      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n        return;\n      }\n      if (!this.pending.length) {\n        if (!this.idling) {\n          this.idling = true;\n          this.emit('idle');\n        }\n        return;\n      }\n      var next = this.pending.shift();\n      this._send(next.mail, function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        setImmediate(function () {\n          return next.callback.apply(next, args);\n        });\n        _this3._sent();\n      });\n    }\n  }, {\n    key: \"_checkSendingRate\",\n    value: function _checkSendingRate() {\n      var _this4 = this;\n      clearTimeout(this.sendingRateTTL);\n      var now = Date.now();\n      var oldest = false;\n      // delete older messages\n      for (var i = this.rateMessages.length - 1; i >= 0; i--) {\n        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n          oldest = this.rateMessages[i].ts;\n        }\n        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n          this.rateMessages.splice(i, 1);\n        }\n      }\n      if (this.rateMessages.length < this.sendingRate) {\n        return true;\n      }\n      var delay = Math.max(oldest + 1001, now + 20);\n      this.sendingRateTTL = setTimeout(function () {\n        return _this4._checkRatedQueue();\n      }, now - delay);\n      try {\n        this.sendingRateTTL.unref();\n      } catch (E) {\n        // Ignore. Happens on envs with non-node timer implementation\n      }\n      return false;\n    }\n  }, {\n    key: \"_sent\",\n    value: function _sent() {\n      this.connections--;\n      this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n  }, {\n    key: \"_send\",\n    value: function _send(mail, callback) {\n      var _this5 = this;\n      var statObject = {\n        ts: Date.now(),\n        pending: true\n      };\n      this.connections++;\n      this.rateMessages.push(statObject);\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n      var getRawMessage = function getRawMessage(next) {\n        // do not use Message-ID and Date in DKIM signature\n        if (!mail.data._dkim) {\n          mail.data._dkim = {};\n        }\n        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n          mail.data._dkim.skipFields += ':date:message-id';\n        } else {\n          mail.data._dkim.skipFields = 'date:message-id';\n        }\n        var sourceStream = mail.message.createReadStream();\n        var stream = sourceStream.pipe(new LeWindows());\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        sourceStream.once('error', function (err) {\n          return stream.emit('error', err);\n        });\n        stream.once('error', function (err) {\n          next(err);\n        });\n        stream.once('end', function () {\n          return next(null, Buffer.concat(chunks, chunklen));\n        });\n      };\n      setImmediate(function () {\n        return getRawMessage(function (err, raw) {\n          if (err) {\n            _this5.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n            statObject.pending = false;\n            return callback(err);\n          }\n          var sesMessage = {\n            RawMessage: {\n              // required\n              Data: raw // required\n            },\n\n            Source: envelope.from,\n            Destinations: envelope.to\n          };\n          Object.keys(mail.data.ses || {}).forEach(function (key) {\n            sesMessage[key] = mail.data.ses[key];\n          });\n          var ses = (_this5.ses.aws ? _this5.ses.ses : _this5.ses) || {};\n          var aws = _this5.ses.aws || {};\n          var getRegion = function getRegion(cb) {\n            if (ses.config && typeof ses.config.region === 'function') {\n              // promise\n              return ses.config.region().then(function (region) {\n                return cb(null, region);\n              }).catch(function (err) {\n                return cb(err);\n              });\n            }\n            return cb(null, ses.config && ses.config.region || 'us-east-1');\n          };\n          getRegion(function (err, region) {\n            if (err || !region) {\n              region = 'us-east-1';\n            }\n            var sendPromise;\n            if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n              // v3 API\n              sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n            } else {\n              // v2 API\n              sendPromise = ses.sendRawEmail(sesMessage).promise();\n            }\n            sendPromise.then(function (data) {\n              if (region === 'us-east-1') {\n                region = 'email';\n              }\n              statObject.pending = false;\n              callback(null, {\n                envelope: {\n                  from: envelope.from,\n                  to: envelope.to\n                },\n                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                response: data.MessageId,\n                raw: raw\n              });\n            }).catch(function (err) {\n              _this5.logger.error({\n                err: err,\n                tnx: 'send'\n              }, 'Send error for %s: %s', messageId, err.message);\n              statObject.pending = false;\n              callback(err);\n            });\n          });\n        });\n      });\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var promise;\n      var ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n      var aws = this.ses.aws || {};\n      var sesMessage = {\n        RawMessage: {\n          // required\n          Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n        },\n        Source: 'invalid@invalid',\n        Destinations: ['invalid@invalid']\n      };\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      var cb = function cb(err) {\n        if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n          return callback(err);\n        }\n        return callback(null, true);\n      };\n      if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n        // v3 API\n        sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n        ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n      } else {\n        // v2 API\n        ses.sendRawEmail(sesMessage, cb);\n      }\n      return promise;\n    }\n  }]);\n  return SESTransport;\n}(EventEmitter);\nmodule.exports = SESTransport;","map":{"version":3,"names":["EventEmitter","require","packageData","shared","LeWindows","SESTransport","options","ses","SES","name","version","logger","getLogger","component","maxConnections","Number","Infinity","connections","sendingRate","sendingRateTTL","rateInterval","rateMessages","pending","idling","setImmediate","emit","mail","callback","push","_checkSendingRate","_send","args","_sent","length","next","shift","clearTimeout","now","Date","oldest","i","ts","splice","delay","Math","max","setTimeout","_checkRatedQueue","unref","E","statObject","envelope","data","message","getEnvelope","messageId","recipients","concat","to","info","tnx","join","getRawMessage","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","err","Buffer","raw","error","sesMessage","RawMessage","Data","Source","from","Destinations","Object","keys","forEach","key","aws","getRegion","cb","config","region","then","catch","sendPromise","send","SendRawEmailCommand","sendRawEmail","promise","MessageId","test","response","Promise","resolve","reject","callbackPromise","code","Code","module","exports"],"sources":["D:/fyp/Ecommerce_Bikiemart/frontend/node_modules/nodemailer/lib/ses-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n\n                let getRegion = cb => {\n                    if (ses.config && typeof ses.config.region === 'function') {\n                        // promise\n                        return ses.config\n                            .region()\n                            .then(region => cb(null, region))\n                            .catch(err => cb(err));\n                    }\n                    return cb(null, (ses.config && ses.config.region) || 'us-east-1');\n                };\n\n                getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    let sendPromise;\n                    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = false;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n            },\n            Source: 'invalid@invalid',\n            Destinations: ['invalid@invalid']\n        };\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = err => {\n            if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}