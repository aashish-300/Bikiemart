[{"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\index.js":"1","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\store.js":"2","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\App.js":"4","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\cartReducers.js":"5","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\userReducers.js":"6","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\orderReducers.js":"7","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\productReducers.js":"8","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Footer.js":"9","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\HomeScreen.js":"10","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductScreen.js":"11","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Header.js":"12","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProfileScreen.js":"13","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\CartScreen.js":"14","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\LoginScreen.js":"15","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ShippingScreen.js":"16","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\RegisterScreen.js":"17","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\UserListScreen.js":"18","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\UserEditScreen.js":"19","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductListScreen.js":"20","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductEditScreen.js":"21","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\OrderListScreen.js":"22","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\PlaceOrderScreen.js":"23","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\PaymentScreen.js":"24","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\OrderScreen.js":"25","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Message.js":"26","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Loader.js":"27","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Product.js":"28","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Paginate.js":"29","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\SearchBox.js":"30","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\FormContainer.js":"31","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\CheckoutSteps.js":"32","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\userConstants.js":"33","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\orderConstants.js":"34","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\cartConstants.js":"35","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\productConstants.js":"36","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\productActions.js":"37","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\orderActions.js":"38","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\userActions.js":"39","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\cartActions.js":"40","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\Khalti.js":"41","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\KhaltiConfig.js":"42","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\KhaltiKey.js":"43","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductCreateScreen.js":"44"},{"size":384,"mtime":1678383153361,"results":"45","hashOfConfig":"46"},{"size":2331,"mtime":1679722487441,"results":"47","hashOfConfig":"46"},{"size":362,"mtime":1675326815416,"results":"48","hashOfConfig":"46"},{"size":2286,"mtime":1679902939238,"results":"49","hashOfConfig":"46"},{"size":1486,"mtime":1676262050699,"results":"50","hashOfConfig":"46"},{"size":3926,"mtime":1678517989719,"results":"51","hashOfConfig":"46"},{"size":4079,"mtime":1675326815888,"results":"52","hashOfConfig":"46"},{"size":4060,"mtime":1679914997516,"results":"53","hashOfConfig":"46"},{"size":360,"mtime":1675327164777,"results":"54","hashOfConfig":"46"},{"size":1670,"mtime":1679759218137,"results":"55","hashOfConfig":"46"},{"size":5518,"mtime":1676257811148,"results":"56","hashOfConfig":"46"},{"size":4438,"mtime":1679915047774,"results":"57","hashOfConfig":"46"},{"size":6774,"mtime":1675326816155,"results":"58","hashOfConfig":"46"},{"size":3963,"mtime":1679143958958,"results":"59","hashOfConfig":"46"},{"size":2565,"mtime":1675435965199,"results":"60","hashOfConfig":"46"},{"size":3100,"mtime":1678550593307,"results":"61","hashOfConfig":"46"},{"size":3921,"mtime":1678518007255,"results":"62","hashOfConfig":"46"},{"size":3511,"mtime":1675326816238,"results":"63","hashOfConfig":"46"},{"size":3912,"mtime":1675326816222,"results":"64","hashOfConfig":"46"},{"size":5916,"mtime":1679903179818,"results":"65","hashOfConfig":"46"},{"size":7099,"mtime":1679911639498,"results":"66","hashOfConfig":"46"},{"size":3541,"mtime":1675326816002,"results":"67","hashOfConfig":"46"},{"size":5470,"mtime":1679240505513,"results":"68","hashOfConfig":"46"},{"size":1690,"mtime":1679236326781,"results":"69","hashOfConfig":"46"},{"size":9261,"mtime":1679236144007,"results":"70","hashOfConfig":"46"},{"size":228,"mtime":1675326815656,"results":"71","hashOfConfig":"46"},{"size":458,"mtime":1675326815626,"results":"72","hashOfConfig":"46"},{"size":885,"mtime":1679757891499,"results":"73","hashOfConfig":"46"},{"size":859,"mtime":1675326815681,"results":"74","hashOfConfig":"46"},{"size":1048,"mtime":1677689508808,"results":"75","hashOfConfig":"46"},{"size":378,"mtime":1675326815587,"results":"76","hashOfConfig":"46"},{"size":1593,"mtime":1675326815539,"results":"77","hashOfConfig":"46"},{"size":1479,"mtime":1678517995771,"results":"78","hashOfConfig":"46"},{"size":1240,"mtime":1675326815809,"results":"79","hashOfConfig":"46"},{"size":287,"mtime":1675326815795,"results":"80","hashOfConfig":"46"},{"size":1265,"mtime":1679217410832,"results":"81","hashOfConfig":"46"},{"size":5987,"mtime":1679905169342,"results":"82","hashOfConfig":"46"},{"size":6009,"mtime":1675326815487,"results":"83","hashOfConfig":"46"},{"size":7372,"mtime":1678517979750,"results":"84","hashOfConfig":"46"},{"size":1310,"mtime":1678550195029,"results":"85","hashOfConfig":"46"},{"size":488,"mtime":1679240238247,"results":"86","hashOfConfig":"46"},{"size":746,"mtime":1679238097201,"results":"87","hashOfConfig":"46"},{"size":174,"mtime":1679237811119,"results":"88","hashOfConfig":"46"},{"size":9109,"mtime":1679914234643,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1i5j68n",{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"92"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\index.js",[],["193","194"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\store.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\App.js",["195"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\HomeScreen.js",["196","197","198","199","200","201"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport Product from \"../components/Product\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport Paginate from \"../components/Paginate\";\r\nimport { AiOutlineDown } from \"react-icons/ai\";\r\nimport { listProducts } from \"../actions/productActions\";\r\n\r\nfunction HomeScreen({ history }) {\r\n  const dispatch = useDispatch();\r\n  const productList = useSelector((state) => state.productList);\r\n  const productCategory = useSelector((state) => state.productCategory);\r\n  const { error, loading, products, page, pages } = productCategory.clicked\r\n    ? productCategory\r\n    : productList;\r\n\r\n  let keyword = history.location.search;\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(listProducts(keyword));\r\n  }, [dispatch, keyword]);\r\n\r\n\r\n\r\n  return (\r\n    <div style={{}}>\r\n      <div style={{ display: \"flex\", \"align-items\": \"center\" }}>\r\n        \r\n        <h1>Latest Products</h1>\r\n      </div>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <div>\r\n          <Row xs={1} sm={2} md={3} lg={4} xl={4} className='g-4'>\r\n            {products.map((product) => (\r\n              <Col key={product._id} xs={6} sm={6} md={4} lg={3} xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          {/* <Paginate page={page} pages={pages} keyword={keyword} /> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductScreen.js",["202","203"],"import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { listProductDetails } from '../actions/productActions'\n\nfunction ProductScreen({ match, history }) {\n    const [qty, setQty] = useState(1)\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    useEffect(() => {\n        dispatch(listProductDetails(match.params.id))\n\n    }, [dispatch, match])\n\n    const addToCartHandler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n    return (\n        <div>\n            <Link to='/' className='btn btn-success my-3'>Go Back</Link>\n            {loading ?\n                <Loader />\n                : error\n                    ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <div>\n                            <Row>\n                                <Col md={6}>\n                                    <Image src={product.image} alt={product.name} fluid />\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <h3>{product.name}</h3>\n                                        </ListGroup.Item>\n\n                                        \n\n                                        <ListGroup.Item>\n                                            Price: Rs {product.price}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            Description: {product.description}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <Card>\n                                        <ListGroup variant='flush'>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Price:</Col>\n                                                    <Col>\n                                                        <strong>RS {product.price}</strong>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            <ListGroup.Item>\n                                            <Row>\n                                                    <Col>Status:</Col>\n                                                    <Col>\n                                                    {product.countInStock > 0 ? \n                                                    (product.countInStock <= 5 ? \n                                                        `Only ${product.countInStock} left` : \n                                                        'In Stock') : \n                                                        <span style={{color: \"red\", fontWeight: \"bold\"}}>Out of Stock</span> \n  }\n                                                         </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            {product.countInStock > 0 && (\n                                            <ListGroup.Item><Row>\n                                                <Col>Qty</Col>\n                                                <Col xs='auto' className='my-1'>\n                                                    <Button variant=\"danger\" style={{ padding: \"5px 10px\" }} onClick={() => setQty(Math.max(qty - 1, 1))}>-</Button>\n                                                    <span className=\"mx-3\">{qty}</span>\n                                                    <Button variant=\"success\" style={{ padding: \"5px 10px\" }} onClick={() => setQty(Math.min(qty + 1, Math.min(5, product.countInStock)))}>+</Button>\n                                                    </Col></Row></ListGroup.Item>\n                                                    )}\n                                                    <ListGroup.Item>\n                                                <Button variant=\"info\"\n                                                    onClick={addToCartHandler}\n                                                    className='btn-block'\n                                                    disabled={product.countInStock == 0}\n                                                    type='button'>\n                                                    Add to Cart\n                                                </Button>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card>\n                                </Col>\n                            </Row>\n                            \n                        </div>\n                    )\n\n            }\n\n\n        </div >\n    )\n}\n\nexport default ProductScreen\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Header.js",["204","205","206","207","208"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProfileScreen.js",["209","210"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\nfunction ProfileScreen({ history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.name || success || userInfo._id !== user._id) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n\n    }\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Enter Password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                </Button>\n\n                </Form>\n            </Col>\n\n            <Col md={9}>\n                <h2>My Orders</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                            <Table striped responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>Date</th>\n                                        <th>Total</th>\n                                        <th>Paid</th>\n                                        <th>Delivered</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {orders.map(order => (\n                                        <tr key={order._id}>\n                                            <td>{order._id}</td>\n                                            <td>{order.createdAt.substring(0, 10)}</td>\n                                            <td>${order.totalPrice}</td>\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n                                            <td>\n                                                <LinkContainer to={`/order/${order._id}`}>\n                                                    <Button className='btn-sm'>Details</Button>\n                                                </LinkContainer>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\CartScreen.js",["211"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from '../actions/cartActions'\n\nfunction CartScreen({ match, location, history }) {\n    const productId = match.params.id\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const { cartItems } = cart\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    return (\n        <Row>\n            <Col md={8}>\n                <h1>Shopping Cart</h1>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        Your cart is empty <Link to='/'>Go Back</Link>\n                    </Message>\n                ) : (\n                    <ListGroup variant='flush'>\n                    {cartItems.map(item => (\n                      <ListGroup.Item key={item.product}>\n                        <Row>\n                          <Col md={2}>\n                            <Image src={item.image} alt={item.name} fluid rounded />\n                          </Col>\n                          <Col md={3}>\n                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                          </Col>\n                          <Col md={2}>\n                            Rs{item.price}\n                          </Col>\n                          <Col md={3}>\n                            <Button variant=\"danger\" style={{ padding: \"5px 10px\" }} onClick={() => dispatch(addToCart(item.product, Math.max(item.qty - 1, 1)))}>-</Button>\n                            <span className=\"mx-3\">{item.qty}</span>\n                            <Button variant=\"success\"style={{ padding: \"5px 10px\" }}  onClick={() => dispatch(addToCart(item.product, Math.min(item.qty + 1, (item.countInStock < 5 ? item.countInStock : 5))))}>+</Button>\n                          </Col>\n                          <Col md={1}>\n                            <Button\n                              type='button'\n                              variant='light'\n                              onClick={() => removeFromCartHandler(item.product)}\n                            >\n                              <i className='fas fa-trash'></i>\n                            </Button>\n                          </Col>\n                        </Row>\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                    )}\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) items</h2>\n                            Rs {cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <Button \n                            type='button'\n                            className='btn-block'\n                            disabled={cartItems.length === 0}\n                            onClick={checkoutHandler}\n                        >\n                            Proceed To Checkout\n                            \n                        </Button>\n                        \n                    </ListGroup.Item>\n\n\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default CartScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ShippingScreen.js",["212"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { saveShippingAddress } from '../actions/cartActions'\n\nfunction ShippingScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    \n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({ address, city, country }))\n        history.push('/payment')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 />\n            <h1>Shipping</h1>\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='address'>\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter address'\n                        value={address ? address : ''}\n                        onChange={(e) => setAddress(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='city'>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter city'\n                        value={city ? city : ''}\n                        onChange={(e) => setCity(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                {/* <Form.Group controlId='postalCode'>\n                    <Form.Label>Postal Code</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter postal code'\n                        value={postalCode ? postalCode : ''}\n                        onChange={(e) => setPostalCode(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group> */}\n\n                <Form.Group controlId='country'>\n                    <Form.Label>Country</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter country'\n                        value={country ? country : ''}\n                        onChange={(e) => setCountry(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingScreen\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\RegisterScreen.js",["213"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\n\nfunction RegisterScreen({ location, history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(register(name, email, password))\n        }\n\n    }\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        required\n                        type='name'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Enter Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Confirm Password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    Have an Account? <Link\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                        Log In\n                        </Link>\n                </Col>\n            </Row>\n        </FormContainer >\n    )\n}\n\nexport default RegisterScreen\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\UserListScreen.js",["214"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\nfunction UserListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this user?')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\UserEditScreen.js",["215"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({ match, history }) {\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET })\n            history.push('/admin/userlist')\n        } else {\n\n            if (!user.name || user._id !== Number(userId)) {\n                dispatch(getUserDetails(userId))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n\n    return (\n        <div>\n            <Link to='/admin/userlist'>\n                Go Back\n            </Link>\n\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter Email'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='isadmin'>\n                                <Form.Check\n                                    type='checkbox'\n                                    label='Is Admin'\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default UserEditScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductListScreen.js",["216","217","218"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductEditScreen.js",["219","220"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\OrderListScreen.js",["221"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listOrders } from '../actions/orderActions'\n\nfunction OrderListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, userInfo])\n\n\n    return (\n        <div>\n            <h1>Orders</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>USER</th>\n                                    <th>DATE</th>\n                                    <th>Total</th>\n                                    <th>PAID</th>\n                                    <th>DELIVERED</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {orders.map(order => (\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td>${order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (\n                                            order.paidAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>{order.isDelivered ? (\n                                            order.deliveredAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    Details\n                                                </Button>\n                                            </LinkContainer>\n\n\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default OrderListScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\PlaceOrderScreen.js",["222","223","224","225"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\nimport Khalti from '../khalti/Khalti'\n\nfunction PlaceOrderScreen({ history }) {\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, error, success } = orderCreate\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n\n\n    cart.totalPrice = (Number(cart.itemsPrice) ).toFixed(2)\n\n\n    if (!cart.paymentMethod) {\n        history.push('/payment')\n    }\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order._id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, history])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice,\n        }))\n    }\n\n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n\n                            <p>\n                                <strong>Shipping: </strong>\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\n                                {'  '}\n                                \n                                {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method: </strong>\n                                {cart.paymentMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\n                                Your cart is empty\n                            </Message> : (\n                                    <ListGroup variant='flush'>\n                                        {cart.cartItems.map((item, index) => (\n                                            <ListGroup.Item key={index}>\n                                                <Row>\n                                                    <Col md={1}>\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                                    </Col>\n\n                                                    <Col>\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                    </Col>\n\n                                                    <Col md={4}>\n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items:</Col>\n                                    <Col>Rs{cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            \n\n                            \n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total:</Col>\n                                    <Col>Rs{cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Khalti/>\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\PaymentScreen.js",["226"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { savePaymentMethod } from '../actions/cartActions'\n\nfunction PaymentScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('khalti')\n\n    if (!shippingAddress.address) {\n        history.push('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Select Method</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='khalti'\n                            id='khalti'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default PaymentScreen\n","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\OrderScreen.js",["227"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\nfunction OrderScreen({ match, history }) {\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login')\n        }\n\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET })\n\n            dispatch(getOrderDetails(orderId))\n        } else if (!order.isPaid) {\n            if (!window.paypal) {\n                addPayPalScript()\n            } else {\n                setSdkReady(true)\n            }\n        }\n    }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n                <div>\n                    <h1>Order: {order.Id}</h1>\n                    <Row>\n                        <Col md={8}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <h2>Shipping</h2>\n                                    <p><strong>Name: </strong> {order.user.name}</p>\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                                    <p>\n                                        <strong>Shipping: </strong>\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\n                                        {'  '}\n                                        {order.shippingAddress.postalCode},\n                                {'  '}\n                                        {order.shippingAddress.country}\n                                    </p>\n\n                                    {order.isDelivered ? (\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>Not Delivered</Message>\n                                        )}\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Payment Method</h2>\n                                    <p>\n                                        <strong>Method: </strong>\n                                        {order.paymentMethod}\n                                    </p>\n                                    {order.isPaid ? (\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>Not Paid</Message>\n                                        )}\n\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Order Items</h2>\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\n                                        Order is empty\n                            </Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                                            </Col>\n\n                                                            <Col>\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                            </Col>\n\n                                                            <Col md={4}>\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col md={4}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Order Summary</h2>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Items:</Col>\n                                            <Col>${order.itemsPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    \n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Total:</Col>\n                                            <Col>${order.totalPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n\n                                    {!order.isPaid && (\n                                        <ListGroup.Item>\n                                            {loadingPay && <Loader />}\n\n                                            {!sdkReady ? (\n                                                <Loader />\n                                            ) : (\n                                                    <PayPalButton\n                                                        amount={order.totalPrice}\n                                                        onSuccess={successPaymentHandler}\n                                                    />\n                                                )}\n                                        </ListGroup.Item>\n                                    )}\n                                </ListGroup>\n                                {loadingDeliver && <Loader />}\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                                    <ListGroup.Item>\n                                        <Button\n                                            type='button'\n                                            className='btn btn-block'\n                                            onClick={deliverHandler}\n                                        >\n                                            Mark As Delivered\n                                        </Button>\n                                    </ListGroup.Item>\n                                )}\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            )\n}\n\nexport default OrderScreen","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Message.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Product.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\SearchBox.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\productActions.js",["228"],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\orderActions.js",["229","230","231"],"import axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n} from '../constants/orderConstants'\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${order._id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\userActions.js",["232"],"import axios from 'axios'\n\n\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n} from '../constants/userConstants'\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\Khalti.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\KhaltiConfig.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\khalti\\KhaltiKey.js",[],"C:\\Users\\aashi\\OneDrive\\Desktop\\Code\\Ecommerce_Bikiemart\\frontend\\src\\screens\\ProductCreateScreen.js",["233","234","235","236","237","238","239","240","241"],{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":21,"column":8,"nodeType":"248","messageId":"249","endLine":21,"endColumn":23},{"ruleId":"246","severity":1,"message":"250","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":25},{"ruleId":"246","severity":1,"message":"251","line":1,"column":38,"nodeType":"248","messageId":"249","endLine":1,"endColumn":44},{"ruleId":"246","severity":1,"message":"252","line":7,"column":8,"nodeType":"248","messageId":"249","endLine":7,"endColumn":16},{"ruleId":"246","severity":1,"message":"253","line":8,"column":10,"nodeType":"248","messageId":"249","endLine":8,"endColumn":23},{"ruleId":"246","severity":1,"message":"254","line":15,"column":37,"nodeType":"248","messageId":"249","endLine":15,"endColumn":41},{"ruleId":"246","severity":1,"message":"255","line":15,"column":43,"nodeType":"248","messageId":"249","endLine":15,"endColumn":48},{"ruleId":"246","severity":1,"message":"256","line":4,"column":52,"nodeType":"248","messageId":"249","endLine":4,"endColumn":56},{"ruleId":"257","severity":1,"message":"258","line":97,"column":84,"nodeType":"259","messageId":"260","endLine":97,"endColumn":86},{"ruleId":"246","severity":1,"message":"250","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":25},{"ruleId":"246","severity":1,"message":"261","line":1,"column":27,"nodeType":"248","messageId":"249","endLine":1,"endColumn":36},{"ruleId":"246","severity":1,"message":"251","line":1,"column":38,"nodeType":"248","messageId":"249","endLine":1,"endColumn":44},{"ruleId":"246","severity":1,"message":"262","line":3,"column":34,"nodeType":"248","messageId":"249","endLine":3,"endColumn":37},{"ruleId":"246","severity":1,"message":"263","line":8,"column":10,"nodeType":"248","messageId":"249","endLine":8,"endColumn":22},{"ruleId":"246","severity":1,"message":"264","line":2,"column":10,"nodeType":"248","messageId":"249","endLine":2,"endColumn":14},{"ruleId":"257","severity":1,"message":"265","line":53,"column":22,"nodeType":"259","messageId":"260","endLine":53,"endColumn":24},{"ruleId":"246","severity":1,"message":"256","line":4,"column":38,"nodeType":"248","messageId":"249","endLine":4,"endColumn":42},{"ruleId":"246","severity":1,"message":"261","line":1,"column":27,"nodeType":"248","messageId":"249","endLine":1,"endColumn":36},{"ruleId":"257","severity":1,"message":"265","line":34,"column":22,"nodeType":"259","messageId":"260","endLine":34,"endColumn":24},{"ruleId":"246","severity":1,"message":"250","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":25},{"ruleId":"266","severity":1,"message":"267","line":43,"column":8,"nodeType":"268","endLine":43,"endColumn":46,"suggestions":"269"},{"ruleId":"246","severity":1,"message":"270","line":11,"column":3,"nodeType":"248","messageId":"249","endLine":11,"endColumn":16},{"ruleId":"246","severity":1,"message":"255","line":21,"column":37,"nodeType":"248","messageId":"249","endLine":21,"endColumn":42},{"ruleId":"246","severity":1,"message":"254","line":21,"column":44,"nodeType":"248","messageId":"249","endLine":21,"endColumn":48},{"ruleId":"246","severity":1,"message":"270","line":12,"column":3,"nodeType":"248","messageId":"249","endLine":12,"endColumn":16},{"ruleId":"246","severity":1,"message":"271","line":13,"column":3,"nodeType":"248","messageId":"249","endLine":13,"endColumn":16},{"ruleId":"246","severity":1,"message":"250","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":25},{"ruleId":"246","severity":1,"message":"250","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":25},{"ruleId":"246","severity":1,"message":"272","line":2,"column":10,"nodeType":"248","messageId":"249","endLine":2,"endColumn":16},{"ruleId":"266","severity":1,"message":"273","line":35,"column":8,"nodeType":"268","endLine":35,"endColumn":26,"suggestions":"274"},{"ruleId":"246","severity":1,"message":"275","line":37,"column":11,"nodeType":"248","messageId":"249","endLine":37,"endColumn":21},{"ruleId":"246","severity":1,"message":"261","line":1,"column":27,"nodeType":"248","messageId":"249","endLine":1,"endColumn":36},{"ruleId":"266","severity":1,"message":"276","line":65,"column":8,"nodeType":"268","endLine":65,"endColumn":62,"suggestions":"277"},{"ruleId":"246","severity":1,"message":"278","line":127,"column":17,"nodeType":"248","messageId":"249","endLine":127,"endColumn":21},{"ruleId":"246","severity":1,"message":"279","line":14,"column":5,"nodeType":"248","messageId":"249","endLine":14,"endColumn":20},{"ruleId":"246","severity":1,"message":"280","line":19,"column":5,"nodeType":"248","messageId":"249","endLine":19,"endColumn":24},{"ruleId":"246","severity":1,"message":"281","line":28,"column":5,"nodeType":"248","messageId":"249","endLine":28,"endColumn":24},{"ruleId":"246","severity":1,"message":"282","line":23,"column":5,"nodeType":"248","messageId":"249","endLine":23,"endColumn":30},{"ruleId":"246","severity":1,"message":"283","line":10,"column":3,"nodeType":"248","messageId":"249","endLine":10,"endColumn":21},{"ruleId":"246","severity":1,"message":"284","line":11,"column":3,"nodeType":"248","messageId":"249","endLine":11,"endColumn":16},{"ruleId":"246","severity":1,"message":"271","line":13,"column":3,"nodeType":"248","messageId":"249","endLine":13,"endColumn":16},{"ruleId":"246","severity":1,"message":"285","line":15,"column":10,"nodeType":"248","messageId":"249","endLine":15,"endColumn":30},{"ruleId":"246","severity":1,"message":"286","line":31,"column":23,"nodeType":"248","messageId":"249","endLine":31,"endColumn":37},{"ruleId":"246","severity":1,"message":"287","line":39,"column":14,"nodeType":"248","messageId":"249","endLine":39,"endColumn":27},{"ruleId":"246","severity":1,"message":"288","line":40,"column":12,"nodeType":"248","messageId":"249","endLine":40,"endColumn":23},{"ruleId":"246","severity":1,"message":"289","line":45,"column":7,"nodeType":"248","messageId":"249","endLine":45,"endColumn":15},{"ruleId":"266","severity":1,"message":"290","line":79,"column":6,"nodeType":"268","endLine":88,"endColumn":4,"suggestions":"291"},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'OrderListScreen' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useRef' is defined but never used.","'Paginate' is defined but never used.","'AiOutlineDown' is defined but never used.","'page' is assigned a value but never used.","'pages' is assigned a value but never used.","'Form' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Row' is defined but never used.","'listProducts' is defined but never used.","'Link' is defined but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["294"],"'createProduct' is defined but never used.","'deleteProduct' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["295"],"'placeOrder' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["296"],"'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'listProductDetails' is defined but never used.","'updateProduct' is defined but never used.","'PRODUCT_UPDATE_RESET' is defined but never used.","'setImageUpload' is assigned a value but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'formData' is defined but never used.","React Hook useEffect has a missing dependency: 'postImage'. Either include it or remove the dependency array.",["297"],"no-global-assign","no-unsafe-negation",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"306","text":"307"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"308","text":"309"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"310","text":"311"},"Update the dependencies array to be: [dispatch, product, history, successUpdate, successCreate, errorUpdate, imageUpload, createdProduct, postImage]",{"range":"312","text":"313"},[1432,1470],"[user, userId, successUpdate, history, dispatch]",[1121,1139],"[success, history, order._id, dispatch]",[2272,2326],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[2833,2979],"[dispatch, product, history, successUpdate, successCreate, errorUpdate, imageUpload, createdProduct, postImage]"]